Dispatcher Worker

import threading
import queue
import time
# Dispatcher-Worker Model Implementation
def worker(task_queue, worker_id):
    while not task_queue.empty():
        try:
            task = task_queue.get_nowait()
            print(f"Worker {worker_id} is processing task: {task}")
            print(f"Queue after Worker {worker_id} picked a task: {list(task_queue.queue)}")
            time.sleep(2)  # Simulate task processing time
            print(f"Worker {worker_id} completed task: {task}\n")
            task_queue.task_done()
        except queue.Empty:
            break
def main():
    num_workers = int(input("Enter the number of workers: "))
    num_tasks = int(input("Enter the number of tasks: "))
    # Create a task queue
    task_queue = queue.Queue()
    # Add tasks to the queue
    for i in range(1, num_tasks + 1):
        task_queue.put(f"Task {i}")
       # Display initial queue
    print("\nInitial Task Queue:")
    print(list(task_queue.queue))
    # Create worker threads
    workers = []
    for i in range(num_workers):
        thread = threading.Thread(target=worker, args=(task_queue, i + 1))
        workers.append(thread)
        thread.start()
    # Wait for all workers to finish
    for thread in workers:
        thread.join()   
    # Display final queue state
    print("\nFinal Task Queue (should be empty if all tasks are done):")
    print(list(task_queue.queue))
    print("All tasks are completed!")
if __name__ == "__main__":
    main()


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Pipeline Model

import threading
import queue
import time
# Pipeline Model Implementation
def stage(stage_id, input_queue, output_queue):
    while not input_queue.empty():
        try:
            task = input_queue.get_nowait()
            print(f"Stage {stage_id} processing: {task}")
            time.sleep(2)
            output_task = f"{task} processed in Stage {stage_id}"
            output_queue.put(output_task)
            input_queue.task_done()
        except queue.Empty:
            break
def run_pipeline_model():
    num_stages = int(input("Enter the number of stages in the pipeline: "))
    num_tasks = int(input("Enter the number of tasks: "))
    current_queue = queue.Queue()
    for i in range(1, num_tasks + 1):
        current_queue.put(f"Task {i}")
    for stage_id in range(1, num_stages + 1):
        next_queue = queue.Queue()
        thread = threading.Thread(target=stage, args=(stage_id, current_queue, next_queue))
        thread.start()
        thread.join()
        current_queue = next_queue
    print("\nFinal Processed Tasks:")
    while not current_queue.empty():
        print(current_queue.get())
    print("Pipeline processing complete!")

if __name__ == "__main__":
    run_pipeline_model()


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Team Model



import threading
import queue
import time
# Team Model Implementation
def team_worker(task_queue, team_id):
    while not task_queue.empty():
        try:
            task = task_queue.get_nowait()
            print(f"Team {team_id} is handling task: {task}")
            time.sleep(2)
            print(f"Team {team_id} completed task: {task}\n")
            task_queue.task_done()
        except queue.Empty:
            break
def run_team_model():
    num_teams = int(input("Enter the number of teams: "))
    num_tasks = int(input("Enter the number of tasks: "))
    task_queue = queue.Queue()
    for i in range(1, num_tasks + 1):
        task_queue.put(f"Task {i}")
    print("\nInitial Task Queue:")
    print(list(task_queue.queue))
    teams = []
    for i in range(num_teams):
        thread = threading.Thread(target=team_worker, args=(task_queue, i + 1))
        teams.append(thread)
        thread.start()
    for thread in teams:
        thread.join()
    print("\nFinal Task Queue (should be empty if all tasks are done):")
    print(list(task_queue.queue))
    print("All tasks are completed!\n")
if __name__ == "__main__":
    run_team_model()
